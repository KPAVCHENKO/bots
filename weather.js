const fs = require('fs');
const path = require('path');
const axios = require('axios');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ª–æ–∫–∞—Ü–∏—è—Ö
const locationsFilePath = path.join(__dirname, 'userLocations.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞
function loadUserLocations() {
    try {
        const data = fs.readFileSync(locationsFilePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö:', error);
        return {};
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π –≤ —Ñ–∞–π–ª
function saveUserLocations(locations) {
    try {
        fs.writeFileSync(locationsFilePath, JSON.stringify(locations, null, 2), 'utf8');
        console.log('–õ–æ–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã *–ø–æ–≥–æ–¥–∞
async function handleWeatherCommand(channel, userstate, args, isTempCommand) {
    const user = userstate['display-name'] || userstate['username'];
    const locations = loadUserLocations();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –≥–æ—Ä–æ–¥
    let targetUser = user;
    let city = null;

    if (args.length > 0) {
        const firstArg = args[0];
        if (firstArg in locations) {
            // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —ç—Ç–æ –Ω–∏–∫–Ω–µ–π–º –∏–∑ —Ñ–∞–π–ª–∞
            targetUser = firstArg;
            city = locations[targetUser]?.city;
        } else {
            // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç —ç—Ç–æ –≥–æ—Ä–æ–¥
            city = args.join(' ');
        }
    } else {
        // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        city = locations[user]?.city;
    }

    if (!city) {
        sendMessage(channel, `/me ${user}, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π set location.`);
        return;
    }

    const weatherUrl = `https://weatherapi-com.p.rapidapi.com/current.json?q=${encodeURIComponent(city)}`;
    const options = {
        method: 'GET',
        url: weatherUrl,
        headers: {
            'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',
            'X-RapidAPI-Key': 'e82bdc0226msh03d7c3e13235cabp1565b9jsn1dbe20d51ec3'
        }
    };

    try {
        const response = await axios.request(options);
        const weatherData = response.data;

        if (weatherData && weatherData.current) {
            const weather = weatherData.current;
            const temperature = weather.temp_c || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            const feelsLike = weather.feelslike_c || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

            if (isTempCommand) {
                // –î–ª—è –∫–æ–º–∞–Ω–¥—ã temp –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –æ—â—É—â–∞–µ–º—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                const tempMessage = `/me ${user}, —Å–µ–π—á–∞—Å –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${temperature}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike}¬∞C.`;
                sendMessage(channel, tempMessage);
            } else {
                // –î–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–≥–æ–¥–∞ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–æ–≥–æ–¥–µ
                const cloudCover = weather.cloud || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const windSpeed = weather.wind_kph || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const humidity = weather.humidity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const pressure = weather.pressure_mb ? weather.pressure_mb / 10 : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'; // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–± –≤ –≥–ü–∞
                const visibility = weather.vis_km || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const condition = weather.condition.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const lastUpdated = weather.last_updated || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const forecast = weatherData.forecast?.forecastday?.[0]?.astro || {};
                const sunrise = forecast.sunrise || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const sunset = forecast.sunset || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                const precip = weather.precip_mm || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

                // –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ª–æ–≤–∏–π –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                const conditionTranslation = {
                    'Clear': '–Ø—Å–Ω–æ',
                    'Sunny': '–°–æ–ª–Ω–µ—á–Ω–æ',
                    'Partly cloudy': '–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ',
                    'Cloudy': '–û–±–ª–∞—á–Ω–æ',
                    'Overcast': '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
                    'Rain': '–î–æ–∂–¥—å',
                    'Drizzle': '–ú–æ—Ä–æ—Å—å',
                    'Showers': '–õ–∏–≤–µ–Ω—å',
                    'Snow': '–°–Ω–µ–≥',
                    'Fog': '–¢—É–º–∞–Ω',
                    'Wind': '–í–µ—Ç–µ—Ä',
                    'Thunderstorm': '–ì—Ä–æ–∑–∞',
                    'Hail': '–ì—Ä–∞–¥'
                };

                const conditionInRussian = conditionTranslation[condition] || condition;

                // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                const weatherEmoji = {
                    'Clear': '‚òÄÔ∏è',
                    'Partly cloudy': '‚õÖ',
                    'Cloudy': '‚òÅÔ∏è',
                    'Overcast': '‚òÅÔ∏è',
                    'Rain': 'üåßÔ∏è',
                    'Drizzle': 'üå¶Ô∏è',
                    'Showers': 'üå¶Ô∏è',
                    'Snow': '‚ùÑÔ∏è',
                    'Fog': 'üå´Ô∏è',
                    'Wind': 'üå¨Ô∏è',
                    'Thunderstorm': '‚õàÔ∏è',
                    'Hail': 'üå®Ô∏è'
                };

                const conditionEmoji = weatherEmoji[condition] || '';

                const weatherMessage = `/me ${user}, —Å–µ–π—á–∞—Å –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ${temperature}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike}¬∞C. –û–±–ª–∞—á–Ω–æ—Å—Ç—å: ${cloudCover}%. –í–µ—Ç–µ—Ä: ${windSpeed} –∫–º/—á. –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${humidity}%. –î–∞–≤–ª–µ–Ω–∏–µ: ${pressure} –≥–ü–∞. –í–∏–¥–∏–º–æ—Å—Ç—å: ${visibility} –∫–º. –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ: ${conditionEmoji} ${conditionInRussian}.`;

                sendMessage(channel, weatherMessage);
            }
        } else {
            sendMessage(channel, `/me ${user}, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error);
        sendMessage(channel, `/me ${user}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã *set location
async function handleSetLocationCommand(channel, userstate, args) {
    const user = userstate['display-name'] || userstate['username'];
    const city = args.join(' ');

    if (!city) {
        sendMessage(channel, `/me ${user}, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.`);
        return;
    }

    const locations = loadUserLocations();
    locations[user] = { city };
    saveUserLocations(locations);

    sendMessage(channel, `/me ${user}, –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.`);
}
